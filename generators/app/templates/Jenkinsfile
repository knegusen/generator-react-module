@Library('build') _


node('agent && docker') {

  deleteDir()

  try {

    stageGitShallowCheckout(scm)

    def version = stageNodeReadVersion()

    echo "Version: ${version}"

    environment {
      project.version = "${version}"
    }

    def image = null

    stage('Pull docker work image') {
      image = docker.image('docker-hub.etraveli.net/build/node:6')
      image.pull()
    } // End stage

    image.inside() {

      stage('Npm set registry') {
        sh 'npm config set registry http://artifactory.etraveli.net/artifactory/api/npm/remote-npm'
      } // End stage

      stage('Npm install') {
        sh 'npm install'
      } // End stage

      stage('Npm run test') {
        sh 'npm run test'
      } // End stage

      stage('Npm run build') {
        sh 'npm run build'
      } // End stage

      if (version.release) {
        stage('Npm publish') {
          withCredentials([usernamePassword(credentialsId: 'Artifactory', passwordVariable: 'pass', usernameVariable: 'user')]) {
            sh "curl -u${user}:${pass} https://artifactory.etraveli.net/artifactory/api/npm/auth > .npmrc"
            sh 'npm config set registry https://artifactory.etraveli.net/artifactory/api/npm/eti-npm-release-local'
            sh 'npm publish'
            sh 'rm -rf .npmrc' // Clean up
          } // End stage
        }
      } else {
        echo 'Skipping npm publish'
      }
    }

    if (version.release) {

      sshagent(['BitBucket']) {

        stageGitTagVersion(version)

        stageNodeUpdateVersion(version)

      } // End stage

    } // End if

  } catch (e) {
    if (currentBuild.result == null) {
      currentBuild.result = 'FAILURE'
    }
    throw e
  } finally {
    notifyBuildStatus(currentBuild.result)
    cleanWs()
  }

} // End node
